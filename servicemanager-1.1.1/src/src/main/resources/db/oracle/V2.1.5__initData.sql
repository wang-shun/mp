INSERT INTO mc_system (id, db, admin_user, admin_passwd, enabled) VALUES ('1', 'mydb', 'admin', 'FHuma025', '1');

INSERT INTO sm_resource_info (id, name, remarks, type) VALUES ('mplus', 'mplus参数', '轻应用启动所需的mplus参数', '3');

INSERT INTO sm_resource_infoitem (id, info_id, key, name, remarks, type, regex, options, group_name, control_size, default_value, sequ) VALUES ('f', 'mplus', 'mplus.sso.serviceUrl', 'mplus第三方接入地址', 'mplus可供访问的第三方接入地址，一般为内网地址，支持https', 'text', 'http(s)?://([\w-]+\.)+[\w-]+(:[0-9]+)?(/[\w- ./?%&=]*)?', NULL, 'common', '255', 'http://192.168.160.98:6001/thirdpartaccess', '1');
INSERT INTO sm_resource_infoitem (id, info_id, key, name, remarks, type, regex, options, group_name, control_size, default_value, sequ) VALUES ('g', 'mplus', 'mplus.sso.appKey', '第三方接入key', 'mplus第三方接入的appKey', 'text', '\w+', NULL, 'common', '50', 'mr', '2');
INSERT INTO sm_resource_infoitem (id, info_id, key, name, remarks, type, regex, options, group_name, control_size, default_value, sequ) VALUES ('h', 'mplus', 'mplus.sso.secret', '第三方接入密钥', 'mplus第三方接入的密钥', 'text', '\w+', NULL, 'common', '50', 'FHuma025', '3');
INSERT INTO sm_resource_infoitem (id, info_id, key, name, remarks, type, regex, options, group_name, control_size, default_value, sequ) VALUES ('i', 'mplus', 'mplus.login.serviceUrl', 'mplus登录接口地址', 'mplus可供访问的客户端登录地址，一般为内网地址，支持https', 'text', 'http(s)?://([\w-]+\.)+[\w-]+(:[0-9]+)?(/[\w- ./?%&=]*)?', NULL, 'common', '255', 'http://192.168.160.98:6001/clientaccess', '4');
INSERT INTO sm_resource_infoitem (id, info_id, key, name, remarks, type, regex, options, group_name, control_size, default_value, sequ) VALUES ('j', 'mplus', 'mplus.login.loginPage', '自服务门户登录页面', 'mplus自服务门户的登录页面地址', 'text', 'http(s)?://([\w-]+\.)+[\w-]+(:[0-9]+)?(/[\w- ./?%&=]*)?', NULL, 'common', '255', 'https://miap.cc:8209/PageRedirect?path=login.jsp', '5');
INSERT INTO sm_resource_infoitem (id, info_id, key, name, remarks, type, regex, options, group_name, control_size, default_value, sequ) VALUES ('k', 'mplus', 'mplus.mos.serviceUrl', 'mos接口地址', 'mos接口地址', 'text', 'http(s)?://([\w-]+\.)+[\w-]+(:[0-9]+)?(/[\w- ./?%&=]*)?', '', 'common', '255', 'http://192.168.160.72:7777/mos/api', '6');
INSERT INTO sm_resource_infoitem (id, info_id, key, name, remarks, type, regex, options, group_name, control_size, default_value, sequ) VALUES ('l', 'mplus', 'mplus.mos.appKey', 'mos接入key', 'mos接入key', 'text', '\w+', '', 'common', '50', 'mos', '7');
INSERT INTO sm_resource_infoitem (id, info_id, key, name, remarks, type, regex, options, group_name, control_size, default_value, sequ) VALUES ('m', 'mplus', 'mplus.mos.secret', 'mos接入秘钥', 'mos接入秘钥', 'text', '\w+', '', 'common', '50', 'FHuma025', '8');
INSERT INTO sm_resource_infoitem (id, info_id, key, name, remarks, type, regex, options, group_name, control_size, default_value, sequ) VALUES ('n', 'mplus', 'mplus.mos.picpath', 'mos图片路径', 'mos图片路径', 'text', '\w+', '', 'common', '255', '/files', '9');

INSERT INTO mc_unit_weight (unit, weight) VALUES ('KB', '1024');
INSERT INTO mc_unit_weight (unit, weight) VALUES ('B', '1');
INSERT INTO mc_unit_weight (unit, weight) VALUES ('MB', '1048576');
INSERT INTO mc_unit_weight (unit, weight) VALUES ('GB', '1073741824');
INSERT INTO mc_unit_weight (unit, weight) VALUES ('毫秒', '1');
INSERT INTO mc_unit_weight (unit, weight) VALUES ('秒', '1000');
INSERT INTO mc_unit_weight (unit, weight) VALUES ('分钟', '60000');
INSERT INTO mc_unit_weight (unit, weight) VALUES ('小时', '3600000');
INSERT INTO mc_unit_weight (unit, weight) VALUES ('天', '86400000');
INSERT INTO mc_unit_weight (unit, weight) VALUES ('吨', '0');
INSERT INTO mc_unit_weight (unit, weight) VALUES ('克', '1');
INSERT INTO mc_unit_weight (unit, weight) VALUES ('千克', '1000');


INSERT INTO mc_measurement (id, system_id, measurement, name, retain_time, retain_policy) VALUES ('mem', '1', 'mem', '内存', NULL, NULL);
INSERT INTO mc_measurement (id, system_id, measurement, name, retain_time, retain_policy) VALUES ('processors', '1', 'processors', 'CPU', NULL, NULL);
INSERT INTO mc_measurement (id, system_id, measurement, name, retain_time, retain_policy) VALUES ('instance', '1', 'instance.uptime', '实例', NULL, NULL);
INSERT INTO mc_measurement (id, system_id, measurement, name, retain_time, retain_policy) VALUES ('systemload', '1', 'systemload', '系统负载', NULL, NULL);
INSERT INTO mc_measurement (id, system_id, measurement, name, retain_time, retain_policy) VALUES ('heap', '1', 'heap', '堆内存', NULL, NULL);
INSERT INTO mc_measurement (id, system_id, measurement, name, retain_time, retain_policy) VALUES ('nonheap', '1', 'nonheap', '非堆内存', NULL, NULL);
INSERT INTO mc_measurement (id, system_id, measurement, name, retain_time, retain_policy) VALUES ('threads', '1', 'threads', '线程', NULL, NULL);
INSERT INTO mc_measurement (id, system_id, measurement, name, retain_time, retain_policy) VALUES ('classes', '1', 'classes', 'JVM类装载', NULL, NULL);
INSERT INTO mc_measurement (id, system_id, measurement, name, retain_time, retain_policy) VALUES ('gc', '1', 'gc', 'JVM垃圾回收', NULL, NULL);
INSERT INTO mc_measurement (id, system_id, measurement, name, retain_time, retain_policy) VALUES ('httpsessions', '1', 'httpsessions', 'http session', NULL, NULL);
INSERT INTO mc_measurement (id, system_id, measurement, name, retain_time, retain_policy) VALUES ('hystrix', '1', 'hystrix', 'hystrix', NULL, NULL);
INSERT INTO mc_measurement (id, system_id, measurement, name, retain_time, retain_policy) VALUES ('rop', '1', 'rop', 'rop API', NULL, NULL);
INSERT INTO mc_measurement (id, system_id, measurement, name, retain_time, retain_policy) VALUES ('http', '1', 'http', 'http请求', '', NULL);

INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('processors', 'processors', 'value', 'CPU核心数', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('threads', 'threads', 'value', '活动线程数', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('classes', 'classes', 'value', '当前已加载类', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('mem', 'mem', 'value', '内存', 'KB');
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('heap', 'heap', 'value', '最大堆内存', 'KB');
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('nonheap', 'nonheap', 'value', '最大非堆内存', 'KB');
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('uptime,domain', 'uptime,domain', 'value', '系统启动运行时间', '毫秒');
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('systemload.average', 'systemload', 'average', '系统CPU平均负载', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('threads.daemon', 'threads', 'daemon', '守护线程数', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('threads.totalStarted', 'threads', 'totalStarted', '已启动总线程数', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('classes.loaded', 'classes', 'loaded', '已加载类总数', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('classes.unloaded', 'classes', 'unloaded', '已卸载类总数', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('gc.copy.count', 'gc', 'copy.count', 'gc.copy回收次数', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.rollingCountShortCircuited', 'hystrix', 'rollingCountShortCircuited', 'hystrix快速熔断数（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('gc.marksweepcompact.count', 'gc', 'marksweepcompact.count', 'gc.marksweepcompact回收次数', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('httpsessions.max', 'httpsessions', 'max', '最大session数', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('httpsessions.active', 'httpsessions', 'active', '活动session数', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.rollingCountSuccess', 'hystrix', 'rollingCountSuccess', 'hystrix成功数（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.rollingCountThreadPoolRejected', 'hystrix', 'rollingCountThreadPoolRejected', 'hystrix线程隔离拒绝数（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.rollingCountTimeout', 'hystrix', 'rollingCountTimeout', 'hystrix超时请求数（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.rollingMaxConcurrentExCount', 'hystrix', 'rollingMaxConcurrentExCount', 'hystrix最大并发数（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.errorCount', 'hystrix', 'errorCount', '错误总数（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.currentConcurrentExecutionCount', 'hystrix', 'currentConcurrentExecutionCount', '当前并发数（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.99.5', 'hystrix', '99.5', '%99.5请求平均耗时（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.99', 'hystrix', '99', '%99请求平均耗时（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.95', 'hystrix', '95', '%95请求平均耗时（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.90', 'hystrix', '90', '%90请求平均耗时（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.75', 'hystrix', '75', '%75请求平均耗时（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.50', 'hystrix', '50', '%50请求平均耗时（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.25', 'hystrix', '25', '%25请求平均耗时（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.100', 'hystrix', '100', '请求平均耗时（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.0', 'hystrix', '0', '%1请求平均耗时（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.errorPercentage', 'hystrix', 'errorPercentage', '错误占比（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.latencyExecute_mean', 'hystrix', 'latencyExecute_mean', 'hystrix平均执行时间', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.latencyTotal_mean', 'hystrix', 'latencyTotal_mean', 'hystrix平均总耗时', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.reportingHosts', 'hystrix', 'reportingHosts', 'hystrix主机数', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.requestCount', 'hystrix', 'requestCount', 'hystrix请求数（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.rollingCountBadRequests', 'hystrix', 'rollingCountBadRequests', 'hystrix错误请求数（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.rollingCountCollapsedRequests', 'hystrix', 'rollingCountCollapsedRequests', 'hystrix崩溃请求数（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.rollingCountEmit', 'hystrix', 'rollingCountEmit', 'hystrix提交请求数（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.rollingCountExceptionsThrown', 'hystrix', 'rollingCountExceptionsThrown', 'hystrix异常数（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.rollingCountFailure', 'hystrix', 'rollingCountFailure', 'hystrix失败数（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.rollingCountFallbackEmit', 'hystrix', 'rollingCountFallbackEmit', 'hystrix降级提交数（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.rollingCountFallbackFailure', 'hystrix', 'rollingCountFallbackFailure', 'hystrix降级失败数（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.rollingCountFallbackMissing', 'hystrix', 'rollingCountFallbackMissing', 'hystrix降级缺失数（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.rollingCountFallbackRejection', 'hystrix', 'rollingCountFallbackRejection', 'hystrix降级拒绝数（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.rollingCountFallbackSuccess', 'hystrix', 'rollingCountFallbackSuccess', 'hystrix降级成功数（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.rollingCountResponsesFromCache', 'hystrix', 'rollingCountResponsesFromCache', 'hystrix从缓存响应数（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('hystrix.rollingCountSemaphoreRejected', 'hystrix', 'rollingCountSemaphoreRejected', 'hystrix信号隔离拒绝数（滚动）', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('mem.free', 'mem', 'free', '空余内存', 'KB');
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('heap.committed', 'heap', 'committed', '堆内存', 'KB');
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('heap.init', 'heap', 'init', '初始堆内存', 'KB');
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('heap.used', 'heap', 'used', '已使用堆内存', 'KB');
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('nonheap.committed', 'nonheap', 'committed', '非堆内存', 'KB');
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('nonheap.init', 'nonheap', 'init', '初始非堆内存', 'KB');
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('nonheap.used', 'nonheap', 'used', '已使用非堆内存', 'KB');
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('threads.peak', 'threads', 'peak', '峰值线程数', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('instance.uptime', 'instance', 'uptime', '应用启动运行时间', '毫秒');
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('gc.copy.time', 'gc', 'copy.time', 'gc.copy回收耗时', '毫秒');
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('gc.marksweepcompact.time', 'gc', 'marksweepcompact.time', 'gc.marksweepcompact回收耗时', '毫秒');
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('rop.api.meter', 'rop', 'api.meter', 'API调用计数', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('rop.api.timer', 'rop', 'api.timer', 'API调用耗时', '毫秒');
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('http.status.500', 'http', 'status.500', '500响应', NULL);
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('http.status.200', 'http', 'status.200', '200响应', '');
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('http.status.400', 'http', 'status.400', '400响应', '');
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('http.status.401', 'http', 'status.401', '401响应', '');
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('http.status.404', 'http', 'status.404', '404响应', '');
INSERT INTO mc_value_field (id, measurement_id, field, name, unit) VALUES ('http.response', 'http', 'response', '响应时间', '毫秒');

INSERT INTO mc_tag (id, tag, system_id, name) VALUES ('doamin', 'domain', '1', '域');
INSERT INTO mc_tag (id, tag, system_id, name) VALUES ('process', 'process', '1', '进程ID');
INSERT INTO mc_tag (id, tag, system_id, name) VALUES ('host', 'host', '1', '主机');
INSERT INTO mc_tag (id, tag, system_id, name) VALUES ('port', 'port', '1', '服务端口');
INSERT INTO mc_tag (id, tag, system_id, name) VALUES ('appId', 'appId', '1', '应用ID');
INSERT INTO mc_tag (id, tag, system_id, name) VALUES ('y', 'y', '1', '年度');
INSERT INTO mc_tag (id, tag, system_id, name) VALUES ('m', 'm', '1', '月份');
INSERT INTO mc_tag (id, tag, system_id, name) VALUES ('method', 'method', '1', 'API方法');
INSERT INTO mc_tag (id, tag, system_id, name) VALUES ('v', 'v', '1', '版本');
INSERT INTO mc_tag (id, tag, system_id, name) VALUES ('endpoint', 'endpoint', '1', 'endpoint');
